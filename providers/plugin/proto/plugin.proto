syntax = "proto3";
package pluginproto;

import "k8s.io/api/core/v1/generated.proto";

option go_package = "proto";

// InitConfig is passed to the provider on initialization
message InitConfig {
    string configPath = 1;
    string nodeName = 2;
    string operatingSystem = 3;
    string internalIP = 4;
    int32 DaemonPort = 5;
}

message ProviderRegisterRequest {
    InitConfig initConfig = 1;
}

message ProviderRegisterResponse {

}

message CreatePodRequest {
    k8s.io.api.core.v1.Pod pod = 1;
}

message CreatePodResponse {

}

message UpdatePodRequest {
    k8s.io.api.core.v1.Pod pod = 1;
}

message UpdatePodResponse {

}

message DeletePodRequest {
    k8s.io.api.core.v1.Pod pod = 1;
}

message DeletePodResponse {

}

message GetPodRequest {
    string namespace = 1;
    string name = 2;
}

message GetPodResponse {
    k8s.io.api.core.v1.Pod pod = 1;
}

message GetContainerLogsRequest {
    string namespace = 1;
    string podName = 2;
    string containerName = 3;
    uint64 tail = 4;
}

message GetContainerLogsResponse {
    string logs = 1;
}

message GetPodStatusRequest {
    string namespace = 1;
    string name = 2;
}

message GetPodStatusResponse {
    k8s.io.api.core.v1.PodStatus status = 1;
}

message GetPodsRequest {

}

message GetPodsResponse {
    repeated k8s.io.api.core.v1.Pod pods = 1;
}

message CapacityRequest {

}

message CapacityResponse {
    // string is ResourceName
    // value is the canonical representation of the resource
    // as rendered from String()
    map<string, string> resourceList = 1;
}

message NodeConditionsRequest {

}

message NodeConditionsResponse {
    repeated k8s.io.api.core.v1.NodeCondition nodeConditions = 1;
}

message NodeAddressesRequest {

}

message NodeAddressesResponse {
    repeated k8s.io.api.core.v1.NodeAddress nodeAddresses = 1;
}

message NodeDaemonEndpointsRequest {

}

message NodeDaemonEndpointsResponse {
    k8s.io.api.core.v1.NodeDaemonEndpoints nodeDaemonEndpoints = 1;
}

message OperatingSystemRequest {

}

message OperatingSystemResponse {
    string operatingSystem = 1;
}

// Provider implements the golang provider interface (roughly). ExecInContainer is not yet implemented.
service Provider {
    rpc Register(ProviderRegisterRequest) returns (ProviderRegisterResponse);
    rpc CreatePod(CreatePodRequest) returns (CreatePodResponse);
    rpc UpdatePod(UpdatePodRequest) returns (UpdatePodResponse);
    rpc DeletePod(DeletePodRequest) returns (DeletePodResponse);
    rpc GetPod(GetPodRequest) returns (GetPodResponse);
    rpc GetContainerLogs(GetContainerLogsRequest) returns (GetContainerLogsResponse);
    rpc GetPodStatus(GetPodStatusRequest) returns (GetPodStatusResponse);
    rpc GetPods(GetPodsRequest) returns (GetPodsResponse);
    rpc Capacity(CapacityRequest) returns (CapacityResponse);
    rpc NodeConditions(NodeConditionsRequest) returns (NodeConditionsResponse);
    rpc NodeAddresses(NodeAddressesRequest) returns (NodeAddressesResponse);
    rpc NodeDaemonEndspoints(NodeDaemonEndpointsRequest) returns (NodeDaemonEndpointsResponse);
    rpc OperatingSystem(OperatingSystemRequest) returns (OperatingSystemResponse);
}

message PodNotifierProviderRegisterRequest {
    uint32 podNotifierProviderBrokerId = 1;
}

message PodNotifierProviderRegisterResponse {
}

service PodNotifierProvider {
    rpc Register(PodNotifierProviderRegisterRequest) returns (PodNotifierProviderRegisterResponse);
}

message NotifyPodsRequest {
    k8s.io.api.core.v1.Pod pod = 1;
}

message NotifyPodsResponse {

}

service PodNotifierCallback {
    rpc NotifyPods(NotifyPodsRequest) returns (NotifyPodsResponse);
}

